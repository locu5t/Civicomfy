// Civicomfy Library Search Node (clean file)
// Embeds the local Library UI inside a node and updates outputs by card type

import { CivitaiDownloaderAPI } from "../../api/civitai.js";
import { createCardElement, populateDrawerWithDetails, toggleDrawer } from "../searchRenderer.js";
import { schemaForType } from "./portSchema.js";

const NODE_TYPE = "Civicomfy/LibrarySearch";

function el(tag, cls = "", attrs = {}) { const e = document.createElement(tag); if (cls) e.className = cls; for (const [k,v] of Object.entries(attrs)) e.setAttribute(k,v); return e; }
function debounce(fn, delay=200){ let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a),delay); }; }

export function registerLibrarySearchNode(app, LiteGraph){
  if (!app || !LiteGraph) return;

  class LibrarySearchNode extends LiteGraph.LGraphNode{
    constructor(){
      super(); this.title='Library Search'; this.color='#2b2f3a'; this.bgcolor='#20232b';
      this.properties = this.properties || {};
      this.properties.bound_model = this.properties.bound_model || '';
      this.properties.card_type = this.properties.card_type || '';
      this.properties.bindings = this.properties.bindings || {};
      this.properties.connector_schema = Array.isArray(this.properties.connector_schema) ? this.properties.connector_schema : [];
      this.properties.ui_state = this.properties.ui_state || { active_tab:'models', query:'' };
      this.size = this.size || [560,420];
      this._overlay=null; this._undoStack=[]; this._lastSelectedItem=null;
      this._rebuildOutputs();
    }

    onAdded(){ this._ensureOverlay(); this._reposition(); }
    onRemoved(){ try{ this._overlay?.remove(); }catch{} this._overlay=null; }
    onResize(sz){ this.size=sz; this._reposition(); }
    onMouseDown(){ this._ensureOverlay(); this._reposition(); }
    onSerialize(o){ o.properties=o.properties||{}; o.properties.bound_model=this.properties.bound_model; o.properties.card_type=this.properties.card_type; o.properties.bindings=this.properties.bindings; o.properties.connector_schema=this.properties.connector_schema; o.properties.ui_state=this.properties.ui_state; }
    onDrawForeground(){ this._reposition(); }

    _rebuildOutputs(){ while(this.outputs&&this.outputs.length) this.removeOutput(0); const cs=Array.isArray(this.properties.connector_schema)? this.properties.connector_schema: []; cs.forEach(c=>this.addOutput(c.name||'Out', c.semanticType||'STRING')); }

    _ensureOverlay(){
      if (this._overlay && document.body.contains(this._overlay)) return;
      const container=el('div','civi-lib-node-overlay',{role:'group','aria-label':'Library search embedded'});
      container.style.cssText='position:absolute; z-index:1005; pointer-events:none; overflow:hidden;';
      const root=el('div','civi-lib-node-root');
      root.style.cssText='position:absolute; inset:6px; pointer-events:auto; display:flex; flex-direction:column; width:calc(100% - 12px); height:calc(100% - 12px); background: var(--comfy-input-bg,#1e1e1e); color: var(--input-text,#ddd); border:1px solid var(--border-color,#444); border-radius:6px; overflow:hidden;';
      const header=el('div','civi-lib-header'); header.style.cssText='display:flex;align-items:center;justify-content:space-between;padding:6px 8px;border-bottom:1px solid var(--border-color,#444);';
      header.innerHTML='<div style="display:flex;align-items:center;gap:8px;"><span style="font-weight:600;">Library</span><div class="civi-lib-tabs" role="tablist" style="display:flex;gap:6px;margin-left:10px;"><button class="civitai-button small" data-tab="models" role="tab" aria-selected="false">Models</button><button class="civitai-button small" data-tab="images" role="tab" aria-selected="false">Images</button></div><div class="civi-conn-chips" style="display:flex;gap:6px;margin-left:10px;"></div></div><div style="display:flex;gap:6px;"><button type="button" class="civitai-button small" data-action="refresh">Refresh</button><button type="button" class="civitai-button small" data-action="undo" disabled>Undo</button></div>';
      const body=el('div','civi-lib-body'); body.style.cssText='display:flex; gap:8px; flex:1 1 auto; min-height:0;';
      const left=el('div','civi-lib-left'); left.style.cssText='flex:0 0 45%; display:flex; flex-direction:column; gap:6px; padding:8px; min-width:180px; border-right:1px solid var(--border-color,#444); overflow:auto;';
      const right=el('div','civi-lib-right'); right.style.cssText='flex:1 1 auto; min-width:240px; padding:8px; overflow:auto;';
      const search=el('input','civi-lib-search',{type:'text',placeholder:'Search downloaded...'}); search.style.cssText='width:100%';
      const list=el('div','civi-lib-results'); list.style.cssText='overflow:auto; flex:1 1 auto;'; left.appendChild(search); left.appendChild(list);
      const host=el('div','civi-lib-card-host'); host.style.cssText='overflow:auto; height:100%'; host.innerHTML='<div style="opacity:0.8; font-size:0.9em;">Select a result to view files and map them to connectors.</div>'; right.appendChild(host);
      body.appendChild(left); body.appendChild(right); root.appendChild(header); root.appendChild(body); container.appendChild(root); document.body.appendChild(container); this._overlay=container;

      header.addEventListener('click',(ev)=>{ const b=ev.target.closest('button'); if(!b) return; const a=b.dataset.action; if(a==='refresh'){ this._doSearch(search.value.trim(),list); return;} if(a==='undo'){ this._undoLastChange(); return;} const tab=b.dataset.tab; if(tab){ this.properties.ui_state.active_tab=tab; this._switchTab(tab,{left,right,list,host}); }});
      header.addEventListener('dragenter',(e)=>{ e.preventDefault(); this._setChipsDragging(true); }); header.addEventListener('dragover',(e)=>{ e.preventDefault(); }); header.addEventListener('dragleave',(e)=>{ if(e.target===header) this._setChipsDragging(false); }); header.addEventListener('drop',(e)=>{ e.preventDefault(); this._setChipsDragging(false); try{ const json=e.dataTransfer?.getData('application/json'); if(!json) return; const payload=JSON.parse(json); const chip=e.target.closest('[data-conn]'); const conn=chip?.dataset?.conn; if(conn) this._bindViaDrop(payload,conn);}catch{} });
      const persist=debounce(()=>{ this.properties.ui_state.query=search.value; },200); search.addEventListener('input',debounce(()=>{ this._doSearch(search.value.trim(),list); persist(); },250));
      try{ const st=this.properties.ui_state||{}; const tab=st.active_tab||'models'; search.value=st.query||''; this._switchTab(tab,{left,right,list,host}); this._doSearch(search.value.trim(),list); } catch{ this._switchTab('models',{left,right,list,host}); this._doSearch('',list); }
      this._renderConnectorChips();
    }

    async _doSearch(q,listEl){ try{ const lib=await CivitaiDownloaderAPI.getLibrary().catch(()=>null); const items=(Array.isArray(lib?.items)? lib.items: []).filter(i=>i && i.deleted!==true && i.exists!==false); const filtered=q? items.filter(i=>[i.model_name,i.version_name,i.filename,i.path].some(f=>String(f||'').toLowerCase().includes(q.toLowerCase()))): items; this._renderResults(listEl, filtered.slice(0,120)); } catch(e){ listEl.innerHTML=`<div style="color:#f99;">Search failed: ${String(e?.details||e?.message||e)}</div>`; } }
    _switchTab(tab,ctx){ const tabs=this._overlay?.querySelectorAll('.civi-lib-tabs > button')||[]; tabs.forEach(b=>{ const a=b.dataset.tab===tab; b.classList.toggle('primary',a); b.setAttribute('aria-selected',a?'true':'false'); }); if(tab==='models'){ ctx.right.innerHTML=''; const host=el('div','civi-lib-card-host'); host.style.cssText='overflow:auto; height:100%'; ctx.right.appendChild(host);} else { this._renderImagesGrid(ctx.right); } }
    _renderResults(listEl,items){ listEl.innerHTML=''; if(!items||items.length===0){ listEl.innerHTML='<div style="opacity:0.7;">No results</div>'; return;} items.forEach(item=>{ const row=el('button','civi-lib-result-row',{type:'button','aria-label':`Select ${item.model_name||item.filename}`}); row.style.cssText='display:flex;gap:8px;align-items:center;width:100%;text-align:left;padding:6px;background:transparent;border:1px solid transparent;border-radius:4px;'; const name=`${item.model_name||item.filename||'Item'} Â· ${item.version_name||''}`; row.innerHTML=`<span style="flex:1 1 auto;">${name}</span><span style="opacity:0.7;font-size:0.85em;">${item.model_type||''}</span>`; row.addEventListener('mouseover',()=>this._previewPorts(item)); row.addEventListener('focus',()=>this._previewPorts(item)); row.addEventListener('mouseleave',()=>this._clearPreview()); row.addEventListener('blur',()=>this._clearPreview()); row.addEventListener('click',()=>this._selectLibraryItem(item)); row.addEventListener('keydown',(e)=>{ if(e.key==='Enter'){ e.preventDefault(); this._selectLibraryItem(item);} }); listEl.appendChild(row); }); }
    _previewPorts(item){ try{ const header=this._overlay?.querySelector('.civi-lib-header'); if(!header) return; let wrap=header.querySelector('#civi-port-preview'); if(!wrap){ wrap=document.createElement('div'); wrap.id='civi-port-preview'; wrap.style.cssText='display:flex;gap:6px;flex-wrap:wrap;margin-left:10px;'; const left=header.firstElementChild; if(left) left.appendChild(wrap);} wrap.innerHTML=''; const sc=schemaForType(item?.model_type); (sc?.outputs||[]).forEach(n=>{ const chip=document.createElement('span'); chip.textContent=n; chip.style.cssText='background:#2d3442;border:1px solid #44506a;border-radius:12px;padding:2px 8px;font-size:11px;'; wrap.appendChild(chip); }); }catch{} }
    _clearPreview(){ try{ this._overlay?.querySelector('#civi-port-preview')?.remove(); }catch{} }

    async _selectLibraryItem(item){ this.properties.bound_model = `${item.model_id ? 'civitai:'+item.model_id : ''}${item.version_id?':'+item.version_id:''}` || (item.path||''); this.properties.card_type=(item.model_type||'').toLowerCase(); this._lastSelectedItem=item; const host=this._overlay.querySelector('.civi-lib-card-host')||this._overlay.querySelector('.civi-lib-right'); if(host) host.innerHTML=''; const card=createCardElement({ modelId:item.model_id||item.modelId||item.id||item.filename, versionId:item.version_id||item.versionId, title:item.model_name||item.filename||'Selected Model', author:item.creator||'', thumbUrl:item.thumbnail||'', downloads:0, likes:0, baseModel:item.base_model||'', modelType:item.model_type||'', versions:[{id:item.version_id,name:item.version_name}].filter(v=>v.id), raw:null }); if(!card){ if(host) host.innerHTML='<div style="color:#f99;">Failed to create card</div>'; return;} if(host) host.appendChild(card); try{ toggleDrawer(card,true);}catch{} try{ let details=null; if(item.metadata_path) details=await CivitaiDownloaderAPI.getLocalDetails({metadata_path:item.metadata_path}).catch(()=>null); if(!details||details.success===false){ const mid=item.model_id||item.modelId; const vid=item.version_id||item.versionId; if(mid) details=await CivitaiDownloaderAPI.getModelDetails({model_id:mid, version_id:vid}).catch(()=>null);} if(details) populateDrawerWithDetails(card,details,[],{modelType:item.model_type}); }catch{} this._decorateFilesForMapping(card,item); this._applyCardSchema(item); this._renderConnectorChips(); this._reposition(); }

    _decorateFilesForMapping(cardEl,libItem){ const filesList=cardEl.querySelector('.civi-files-list'); if(!filesList) return; if(filesList.children.length===0 && libItem?.path){ const row=el('div','civi-file-row'); row.style.cssText='display:flex;align-items:center;gap:8px;padding:4px;border:1px solid var(--border-color,#444);border-radius:4px;margin:2px 0;'; row.innerHTML=`<span style="flex:1 1 auto;">${libItem.filename||libItem.path.split(/\\|\//).pop()}</span>`; row.dataset.filePath=libItem.path; row.dataset.role=(libItem.model_type||'').toLowerCase(); filesList.appendChild(row); } Array.from(filesList.children).forEach(row=>{ if(!(row instanceof HTMLElement)) return; row.tabIndex=0; row.setAttribute('role','button'); row.setAttribute('aria-label','Map file to connector'); row.addEventListener('click',(e)=>{ e.stopPropagation(); this._openMapMenu(row,libItem); }); row.addEventListener('keydown',(e)=>{ if(e.key==='Enter'||e.key===' '){ e.preventDefault(); this._openMapMenu(row,libItem);} }); row.draggable=true; row.addEventListener('dragstart',(ev)=>{ const payload={type:'model-file', id:libItem.id||libItem.path, role:row.dataset.role||'', file_path:row.dataset.filePath||libItem.path||''}; ev.dataTransfer?.setData('application/json', JSON.stringify(payload)); ev.dataTransfer?.setDragImage(row,10,10); }); }); }
    _openMapMenu(row,libItem){ const menu=el('div','civi-map-menu'); menu.style.cssText='position:absolute; z-index:1006; background:var(--comfy-menu-bg,#282828); border:1px solid var(--border-color,#444); border-radius:6px; padding:6px; display:flex; flex-direction:column; gap:4px;'; const names=(Array.isArray(this.properties.connector_schema)? this.properties.connector_schema: []).map(r=>r.name); names.forEach(name=>{ const b=el('button','civitai-button small'); b.type='button'; b.textContent=`Map as â ${name}`; b.setAttribute('aria-label',`Map as ${name}`); b.addEventListener('click',()=>{ this._bindConnector(name,row.dataset.filePath||libItem.path||'',libItem); document.body.removeChild(menu); }); menu.appendChild(b); }); const rect=row.getBoundingClientRect(); menu.style.left=`${Math.round(rect.left)}px`; menu.style.top=`${Math.round(rect.bottom+4)}px`; document.body.appendChild(menu); const remove=(ev)=>{ if(!menu.contains(ev.target)){ try{ document.body.removeChild(menu);}catch{} document.removeEventListener('mousedown',remove,true);} }; document.addEventListener('mousedown',remove,true); }
    _bindConnector(connectorName,fileRef,libItem){ this.properties.bindings=this.properties.bindings||{}; this.properties.bindings[connectorName]=this._canonicalRef(libItem,fileRef); const exists=(this.properties.connector_schema||[]).some(s=>s.name===connectorName); if(!exists){ this.properties.connector_schema.push({name:connectorName, semanticType:'STRING', direction:'out'}); this.addOutput(connectorName,'STRING'); } this._renderConnectorChips(); this.setDirtyCanvas(true,true); }

    _renderConnectorChips(){ try{ const wrap=this._overlay?.querySelector('.civi-conn-chips'); if(!wrap) return; wrap.innerHTML=''; const cs=Array.isArray(this.properties.connector_schema)? this.properties.connector_schema: []; cs.forEach(s=>{ const chip=document.createElement('span'); chip.dataset.conn=s.name; chip.textContent=s.name; chip.title='Drop resource here to bind'; chip.style.cssText='background:#1f2a3a;border:1px dashed #64748b;border-radius:12px;padding:2px 8px;font-size:11px;'; wrap.appendChild(chip); }); }catch{} }
    _setChipsDragging(a){ try{ const chips=this._overlay?.querySelectorAll('.civi-conn-chips > [data-conn]')||[]; chips.forEach(ch=> ch.style.borderStyle=a?'solid':'dashed'); }catch{} }
    _roleToPreferredConnector(role){ const r=String(role||'').toLowerCase(); if(!r) return null; if(r.includes('lora')||r==='locon'||r==='lycoris') return 'LoRAOut'; if(r.includes('vae')) return 'VAEOut'; if(r.includes('clip')) return 'CLIPOut'; if(r.includes('unet')) return 'UNetOut'; if(r.includes('model')||r.includes('ckpt')||r.includes('checkpoint')) return 'ModelOut'; return 'MetaOut'; }
    _bindViaDrop(payload,conn){ try{ if(!payload||payload.type!=='model-file') return; const pref=this._roleToPreferredConnector(payload.role||''); if(pref&&pref!==conn) this._toast(`Note: role suggests ${pref}, binding to ${conn}`); const fake={path:payload.file_path||'', model_id:null, version_id:null}; this._bindConnector(conn,payload.file_path,fake);}catch{} }

    async _renderImagesGrid(right){ const wrapId='civi-images-grid'; let wrap=right.querySelector('#'+wrapId); if(!wrap){ wrap=document.createElement('div'); wrap.id=wrapId; wrap.style.cssText='height:100%;overflow:auto;'; right.innerHTML=''; right.appendChild(wrap);} else { wrap.innerHTML=''; } const item=this._lastSelectedItem; if(!item){ wrap.innerHTML='<div style="opacity:0.8;">Select a model to view its images.</div>'; return; } let details=null; try{ if(item.metadata_path) details=await CivitaiDownloaderAPI.getLocalDetails({metadata_path:item.metadata_path}).catch(()=>null); if(!details||details.success===false){ const mid=item.model_id||item.modelId; const vid=item.version_id||item.versionId; if(mid) details=await CivitaiDownloaderAPI.getModelDetails({model_id:mid, version_id:vid}).catch(()=>null);} }catch{} const images=Array.isArray(details?.images)? details.images: []; if(images.length===0){ wrap.innerHTML='<div style="opacity:0.8;">No images in offline metadata.</div>'; return;} const grid=document.createElement('div'); grid.style.cssText='column-count:3; column-gap:10px;'; const make=(img)=>{ const card=document.createElement('div'); card.style.cssText='break-inside:avoid; margin:0 0 10px; background:var(--comfy-input-bg,#1e1e1e); border:1px solid var(--border-color,#444); border-radius:6px; overflow:hidden;'; const src=img.url||img.src||img.thumbnail||''; const media=document.createElement('img'); media.src=src; media.loading='lazy'; media.alt=img.caption||'Preview'; media.style.cssText='width:100%; display:block;'; media.onerror=()=>{ media.style.visibility='hidden'; }; const actions=document.createElement('div'); actions.style.cssText='display:flex;gap:6px; padding:6px; justify-content:flex-end;'; const load=document.createElement('button'); load.className='civitai-button small'; load.textContent='Load Workflow'; load.addEventListener('click',()=>this._tryLoadWorkflowFromImage(img)); const res=document.createElement('button'); res.className='civitai-button small'; res.textContent='Resources'; res.addEventListener('click',()=>this._toggleResources(card,img)); const usePrompt=document.createElement('button'); usePrompt.className='civitai-button small'; usePrompt.textContent='Use Prompt'; usePrompt.title='Expose image prompt as PromptOut (STRING)'; usePrompt.addEventListener('click',()=>this._activatePromptOutputFromImage(img)); actions.appendChild(load); actions.appendChild(res); actions.appendChild(usePrompt); card.appendChild(media); card.appendChild(actions); return card; }; images.forEach(i=>grid.appendChild(make(i))); wrap.appendChild(grid); }
    _tryLoadWorkflowFromImage(img){ try{ const wf=img?.workflow||img?.meta?.workflow||img?.metadata?.workflow||null; if(!wf){ this._toast('No workflow metadata found on this image'); return;} let data=wf; if(typeof wf==='string'){ try{ data=JSON.parse(wf);}catch{} } if(!data||typeof data!=='object'||!Array.isArray(data.nodes)){ this._toast('Unsupported workflow format'); return;} this._appendComfyWorkflowJSON(data); this._toast('Workflow loaded'); }catch{ this._toast('Failed to load workflow'); } }
    _appendComfyWorkflowJSON(graphData){ try{ const LG=window?.LiteGraph; const graph=window?.app?.graph; if(!LG||!graph) return; const idMap=new Map(); const make=(n)=>{ let node=null; try{ node=LG.createNode(n.type);}catch{} if(!node) return null; if(Array.isArray(n.pos)) node.pos=[n.pos[0]+50,n.pos[1]+50]; if(Array.isArray(n.size)) node.size=n.size; if(Array.isArray(n.widgets)&&Array.isArray(node.widgets)){ const wmap=new Map(n.widgets.map(w=>[w.name,w.value])); node.widgets.forEach(w=>{ if(w&&w.name&&wmap.has(w.name)) w.value=wmap.get(w.name); }); } graph.add(node); return node; }; (graphData.nodes||[]).forEach(n=>{ const node=make(n); if(node) idMap.set(n.id,node); }); if(Array.isArray(graphData.links)){ graphData.links.forEach(lk=>{ try{ const a=idMap.get(lk.origin_id); const b=idMap.get(lk.target_id); if(!a||!b) return; a.connect(lk.origin_slot,b,lk.target_slot);}catch{} }); } graph.setDirtyCanvas(true,true);}catch{} }
    _toast(msg){ try{ window?.civitaiDownloaderUI?.showToast(String(msg),'info'); }catch{} }
    _extractPrompt(img){ try{ const p=img?.prompt||img?.meta?.prompt||img?.metadata?.prompt||img?.caption||''; if(p) return String(p); const wf=img?.workflow||img?.meta?.workflow||img?.metadata?.workflow; let data=wf; if(typeof wf==='string'){ try{ data=JSON.parse(wf);}catch{} } const candidates=[]; if(data&&Array.isArray(data.nodes)){ data.nodes.forEach(n=>{ const w=Array.isArray(n.widgets)? n.widgets: []; w.forEach(ww=>{ const nm=String(ww.name||'').toLowerCase(); if((nm.includes('text')||nm.includes('prompt')) && typeof ww.value==='string'){ candidates.push(ww.value); } }); }); } return candidates[0]||''; }catch{ return ''; } }
    _activatePromptOutputFromImage(img){ const text=this._extractPrompt(img); if(!text){ this._toast('No prompt text found on this image'); return;} this.properties.prompt_text=text; const names=(this.properties.connector_schema||[]).map(s=>s.name); if(!names.includes('PromptOut')){ this.properties.connector_schema.push({name:'PromptOut', semanticType:'STRING', direction:'out'}); this.addOutput('PromptOut','STRING'); this._renderConnectorChips(); } this.setDirtyCanvas(true,true); this._toast('PromptOut is available (STRING). Connect to CLIP Text Encode.'); }

    _applyCardSchema(libItem){ const sc=schemaForType(libItem?.model_type); const desired=Array.isArray(sc.outputs)? sc.outputs: []; const current=Array.isArray(this.outputs)? this.outputs.map(o=>o.name): []; const toAdd=desired.filter(n=>!current.includes(n)); const toRemove=current.filter(n=>!desired.includes(n)); if(toAdd.length===0&&toRemove.length===0) return; const impacted=this._findImpactedLinksByOutputNames(toRemove); const proceed=()=>{ this._pushUndoSnapshot({ previousSchema: current.slice(), impacted }); const nameToIdx=new Map(); (this.outputs||[]).forEach((o,i)=>nameToIdx.set(o.name,i)); const removes=toRemove.map(n=>nameToIdx.get(n)).filter(i=>i!==undefined).sort((a,b)=>b-a); removes.forEach(idx=>this.removeOutput(idx)); toAdd.forEach(n=>this.addOutput(n,'STRING')); this.properties.connector_schema=desired.map(n=>({name:n, semanticType:'STRING', direction:'out'})); this.properties.bindings=this.properties.bindings||{}; toRemove.forEach(n=>{ delete this.properties.bindings[n]; }); if(impacted&&impacted.length) this._attemptAutoReconnect(impacted,desired); this._setUndoButtonEnabled(true); setTimeout(()=>this._setUndoButtonEnabled(false),5000); this._renderConnectorChips(); this.setDirtyCanvas(true,true); }; if(impacted.length) this._showPortChangeConfirm(impacted,proceed); else proceed(); }
    _getGraph(){ try{ return window?.app?.graph; }catch{ return null; } }
    _findImpactedLinksByOutputNames(names=[]){ const graph=this._getGraph(); if(!graph||!Array.isArray(this.outputs)) return []; const nameToIdx=new Map(this.outputs.map((o,i)=>[o.name,i])); const impacted=[]; names.forEach(n=>{ const idx=nameToIdx.get(n); if(idx==null) return; const out=this.outputs[idx]; const links=Array.isArray(out?.links)? out.links: []; links.forEach(linkId=>{ const link=graph.links?.[linkId]; if(!link) return; impacted.push({outputName:n, outputIndex:idx, linkId, target_id:link.target_id, target_slot:link.target_slot}); }); }); return impacted; }
    _showPortChangeConfirm(impacted,onConfirm){ const modal=document.createElement('div'); modal.className='civitai-confirmation-modal'; modal.style.display='flex'; modal.innerHTML=`<div class="civitai-confirmation-modal-content"><h4>Change ports?</h4><p>Changing card type will remove some outputs and disconnect ${impacted.length} connection(s):</p><div style="max-height:180px;overflow:auto;border:1px solid var(--border-color,#444);padding:6px;">${impacted.map(i=>`<div>Output <code>${i.outputName}</code> â Node ${i.target_id} [in ${i.target_slot}]</div>`).join('')}</div><div class="civitai-confirmation-modal-actions"><button class="civitai-button" data-act="cancel">Cancel</button><button class="civitai-button danger" data-act="apply">Replace & Disconnect</button></div></div>`; document.body.appendChild(modal); const close=()=>{ try{ document.body.removeChild(modal);}catch{} }; modal.addEventListener('click',(e)=>{ if(e.target===modal) close(); }); modal.querySelector('[data-act="cancel"]').addEventListener('click',()=>close()); modal.querySelector('[data-act="apply"]').addEventListener('click',()=>{ close(); onConfirm(); }); }
    _attemptAutoReconnect(impacted,desired){ const graph=this._getGraph(); if(!graph) return; const nameToIdx=new Map((this.outputs||[]).map((o,i)=>[o.name,i])); impacted.forEach(info=>{ if(!desired.includes(info.outputName)) return; const outIdx=nameToIdx.get(info.outputName); const target=graph._nodes?.find(n=>n.id===info.target_id); if(!target||outIdx==null) return; try{ this.connect(outIdx,target,info.target_slot);}catch{} }); }
    _pushUndoSnapshot(snap){ const schema=Array.isArray(this.outputs)? this.outputs.map(o=>o.name): []; const bindings=JSON.parse(JSON.stringify(this.properties?.bindings||{})); this._undoStack.push({schema, bindings, impacted: snap.impacted||[], previousSchema: snap.previousSchema||schema}); if(this._undoStack.length>10) this._undoStack.shift(); }
    _undoLastChange(){ const graph=this._getGraph(); const last=this._undoStack.pop(); if(!last) return; const count=(this.outputs||[]).length; for(let i=count-1;i>=0;i--) this.removeOutput(i); last.previousSchema.forEach(n=>this.addOutput(n,'STRING')); this.properties.connector_schema=last.previousSchema.map(n=>({name:n, semanticType:'STRING', direction:'out'})); this.properties.bindings=last.bindings; if(graph&&last.impacted){ const nameToIdx=new Map((this.outputs||[]).map((o,i)=>[o.name,i])); last.impacted.forEach(i=>{ const outIdx=nameToIdx.get(i.outputName); const target=graph._nodes?.find(n=>n.id===i.target_id); if(outIdx==null||!target) return; try{ this.connect(outIdx,target,i.target_slot);}catch{} }); } this._renderConnectorChips(); this.setDirtyCanvas(true,true); }
    _setUndoButtonEnabled(en){ try{ const b=this._overlay?.querySelector('[data-action="undo"]'); if(b) b.disabled=!en; }catch{} }

    _canonicalRef(item,path){ const mid=item?.model_id||item?.modelId; const vid=item?.version_id||item?.versionId; if(mid) return `civitai:${mid}${vid?":"+vid:""}`; if(path) return path.startsWith('file://')? path: `file://${path}`; return ''; }
    _reposition(){ if(!this._overlay) return; try{ const canvas=app.canvas; const rect=canvas.canvas.getBoundingClientRect(); const scale=canvas.ds.scale; const offset=canvas.ds.offset; const x=Math.round(rect.left+(this.pos[0])*scale+offset[0]); const y=Math.round(rect.top+(this.pos[1])*scale+offset[1]); const w=Math.round(Math.max(220,this.size[0])*scale); const h=Math.round(Math.max(140,this.size[1])*scale); Object.assign(this._overlay.style,{ left:`${x}px`, top:`${y}px`, width:`${w}px`, height:`${h}px` }); }catch{} }
  }

  LibrarySearchNode.title='Library Search'; LibrarySearchNode.desc='Embed library card; map files to connectors'; LibrarySearchNode.prototype.serialize_widgets=true; LiteGraph.registerNodeType(NODE_TYPE,LibrarySearchNode);
}

